{
  "componentName": "CaffeDetection",
  "componentVersion": "2.0.0",
  "middlewareVersion" : "2.0.0",
  "sourceLanguage": "c++",
  "batchLibrary": "${MPF_HOME}/plugins/CaffeDetection/lib/libcaffe.so",
  "environmentVariables": [
    {
      "name": "LD_LIBRARY_PATH",
      "value": "${MPF_HOME}/plugins/CaffeDetection/lib:${LD_LIBRARY_PATH}"
    }
  ],
  "algorithm": {
    "name": "CAFFE",
    "description": "Returns a semantic description and a confidence score when provided with an input image.",
    "actionType": "DETECTION",
    "requiresCollection": {
      "states": []
    },
    "providesCollection": {
      "states": [
        "DETECTION",
        "DETECTION_CLASS",
        "DETECTION_CLASS_CAFFE"
      ],
      "properties": [
        {
          "name": "FEED_FORWARD_TYPE",
          "description": "Applies to images and videos. The type of feed-forward behavior. Controls how this algorithm will make use of the tracks generated in the previous pipeline stage. If this algorithm is used in the first pipeline stage then this property has no effect. Instead, the default segmenting behavior is used, where tracks from the previous stage are used to generate segments based on the TARGET_SEGMENT_LENGTH and MIN_SEGMENT_LENGTH properties. Can be set to “NONE”, “FRAME”, “SUPERSET_REGION”, or “REGION”. If set to “NONE”, the default segmenting behavior is used. If set to “FRAME”, “SUPERSET_REGION”, or “REGION” then the segment length properties are ignored and instead this algorithm will process one segment per track generated in the previous stage. If set to “FRAME”, then this algorithm will ignore the regions associated with previous detections and instead process the entire frame associated with each of those detections. If set to “SUPERSET_REGION”, then this algorithm will generate a superset region for each of the previous tracks – a bounding box of constant size and position that encloses all of the track’s detection regions. This algorithm will only process the data within the superset region. If set to “REGION”, then this algorithm will use the regions associated with previous detections, which may vary in size and position from frame to frame.",
          "type": "STRING",
          "defaultValue": "NONE"
        },
        {
          "name": "FEED_FORWARD_TOP_CONFIDENCE_COUNT",
          "description": "Only applies if FEED_FORWARD_TYPE is set to a value other than “NONE”. If set to a value <= 0, then for each track generated in the previous pipeline stage, this algorithm will process the frame associated with each detection in that track, ignoring frames that don’t have detections. If FEED_FORWARD_TYPE is set to “FRAME”, then the entire frame is processed. If FEED_FORWARD_TYPE is set to “SUPERSET_REGION”, then only the superset region for those frames is processed. If FEED_FORWARD_TYPE is set to “REGION”, then the specific detection region for each frame is processed. If this property is set to “1” then only the exemplar frame for each of the previous tracks is processed. If this property is set to a value > 1, say 5, then each of the detections in the previous track are sorted by confidence and this algorithm will only process the frames associated with the top 5 detections with the highest confidence. For detections with the same confidence values, it will select those with a lower frame index. If the track contains less than 5 detections, then all of the available detections are used. In practice, setting this property to a value > 1 has no effect on image and audio jobs because each track only contains one detection.",
          "type": "INT",
          "defaultValue": "0"
        },
        {
          "name": "USE_KEY_FRAMES",
          "description": "When true the component will only look at key frames (I-frames) from the input video. Can be used in conjunction with FRAME_INTERVAL. For example, when USE_KEY_FRAMES is true, and FRAME_INTERVAL is set to \"2\", then every other key frame will be processed.",
          "type": "BOOLEAN",
          "defaultValue": "false"
        },
        {
          "name": "FRAME_INTERVAL",
          "description": "Controls whether the component performs detection on every frame in the video segment, or skips some frames at a regular interval. Must be greater than or equal to 0. If the frame_interval is set to 0 or 1, a frame_interval of 1 will be used, so that detections are performed on every frame. For a frame interval N > 1, every N-1 frames will be skipped. Default value is defined by the MPF properties file.",
          "type": "INT",
          "propertiesKey": "detection.sampling.interval"
        },
        {
          "name": "CONFIDENCE_THRESHOLD",
          "description": "The confidence threshold for returning a classification result. No classifications lower than this threshold will be returned, even if that means returning fewer classifications than the number of classifications requested. The value must be greater than or equal to 0.0.",
          "type": "DOUBLE",
          "defaultValue": "0.0"
        },
        {
          "name": "MIN_GAP_BETWEEN_SEGMENTS",
          "description": "In the context of videos, the minimum number of frames between segments which are not adjacent. Value must be greater than or equal to 1. Default value is defined by the MPF properties file.",
          "type": "INT",
          "propertiesKey": "detection.segment.minimum.gap"
        },
        {
          "name": "TARGET_SEGMENT_LENGTH",
          "description": "In the context of videos, the preferred length of segments which are to be processed by this algorithm. Value is expected to be greater than 10. Default value is defined by the MPF properties file.",
          "type": "INT",
          "propertiesKey": "detection.segment.target.length"
        },
        {
          "name": "MIN_SEGMENT_LENGTH",
          "description": "In the context of videos, the minimum length of a segment which will be processed by this algorithm. Value must be greater than 0. Default value is defined by the MPF properties file.",
          "type": "INT",
          "propertiesKey": "detection.segment.minimum.length"
        },
        {
          "name": "MERGE_TRACKS",
          "description": "In the context of videos, when set to true, attempt to merge tracks spanning segment boundaries. Default value is defined by the MPF properties file.",
          "type": "BOOLEAN",
          "propertiesKey": "detection.track.merging.enabled"
        },
        {
          "name": "MIN_GAP_BETWEEN_TRACKS",
          "description": "In the context of videos, similar tracks with less than this number of frames between them will be merged into a single track. If MERGE_TRACKS is false, this has no effect. Default value is defined by the MPF properties file.",
          "type": "INT",
          "propertiesKey": "detection.track.min.gap"
        },
        {
          "name": "MIN_TRACK_LENGTH",
          "description": "In the context of videos, defines the minimum track length in frames. Tracks shorter than this minimum length will be silently discarded. Default value is defined by the MPF properties file.",
          "type": "INT",
          "propertiesKey": "detection.track.minimum.length"
        },
        {
          "name": "MIN_OVERLAP",
          "description": "In the context of videos, the minimum overlap between detection bounding boxes for adjacent tracks to be considered continuous. Value is expected to be between 0 and 1. Default value is defined by the MPF properties file.",
          "type": "DOUBLE",
          "propertiesKey": "detection.track.overlap.threshold"
        },
        {
          "name": "SEARCH_REGION_ENABLE_DETECTION",
          "description": "Enable cropping.",
          "type": "BOOLEAN",
          "defaultValue": "false"
        },
        {
          "name": "SEARCH_REGION_TOP_LEFT_X_DETECTION",
          "description": "X coordinate for top left corner of cropped frame. If negative, 0 will be used.",
          "type": "INT",
          "defaultValue": "-1"
        },
        {
          "name": "SEARCH_REGION_TOP_LEFT_Y_DETECTION",
          "description": "Y coordinate for top left corner of cropped frame. If negative, 0 will be used.",
          "type": "INT",
          "defaultValue": "-1"
        },
        {
          "name": "SEARCH_REGION_BOTTOM_RIGHT_X_DETECTION",
          "description": "X coordinate for bottom right corner of cropped frame. If negative, bottom right X of input media will be used.",
          "type": "INT",
          "defaultValue": "-1"
        },
        {
          "name": "SEARCH_REGION_BOTTOM_RIGHT_Y_DETECTION",
          "description": "Y coordinate for bottom right corner of cropped frame. If negative, bottom right Y of input media. will be used.",
          "type": "INT",
          "defaultValue": "-1"
        },
        {
          "name": "ROTATION",
          "description": "Specifies the number of degrees in the clockwise direction that the media will be rotated. Only 90, 180 and 270 degrees are supported.",
          "type": "INT",
          "defaultValue": "0"
        },
        {
          "name": "HORIZONTAL_FLIP",
          "description": "Specifies whether or not the original media is flipped. Rotation occurs before flipping.",
          "type": "BOOLEAN",
          "defaultValue": "false"
        },
        {
          "name": "AUTO_ROTATE",
          "description": "Specifies whether not to rotate media based on EXIF data or video metadata.",
          "type": "BOOLEAN",
          "defaultValue": "false"
        },
        {
          "name": "AUTO_FLIP",
          "description": "Specifies whether or not to flip media based on EXIF data.",
          "type": "BOOLEAN",
          "defaultValue": "false"
        },
        {
          "name": "MODEL_NAME",
          "description": "The model to be used with Caffe. 'googlenet' is provided by default. Other models can be provided separately.",
          "type": "STRING",
          "defaultValue": "googlenet"
        },
        {
          "name": "MODEL_OUTPUT_LAYER",
          "description": "The name of the layer within the specified model for which output should be reported. The model layer names are defined in the .prototxt file associated with the model.",
          "type": "STRING",
          "defaultValue": "prob"
        },
        {
          "name": "ACTIVATION_LAYER_LIST",
          "description": "The semicolon-delimited list of names of layers within the specified model for which activation values should be reported in the output. The model activation layer names are defined in the .prototxt file associated with the model.",
          "type": "STRING",
          "defaultValue": ""
        },
        {
          "name": "SPECTRAL_HASH_FILE_LIST",
          "description": "A semicolon-delimited list of paths to files. Each file contains JSON formatted data to be used in computing the spectral hash of the activation values in one of the layers in the model. The list contains the following: the name of the model layer, the number of bits in the spectral hash, the max and min matrices, the modes matrix, and the principal components matrix.",
          "type": "STRING",
          "defaultValue": ""
        },
        {
          "name": "NUMBER_OF_CLASSIFICATIONS",
          "description": "The number of classifications, N, to be returned. The N highest confidence classifications found by the network will be returned with their associated confidence values. The value must be greater than 0, and less than the size of the model output layer.",
          "type": "INT",
          "defaultValue": "1"
        },
        {
          "name": "RESIZE_HEIGHT",
          "description": "The height, in pixels, to resize an input image before cropping it. The default value (224) is for the default model (googlenet).",
          "type": "INT",
          "defaultValue": "224"
        },
        {
          "name": "RESIZE_WIDTH",
          "description": "The width, in pixels, to resize an input image before cropping it. The default value (224) is for the default model (googlenet).",
          "type": "INT",
          "defaultValue": "224"
        },
        {
          "name": "TOP_AND_BOTTOM_CROP",
          "description": "The number of pixels to crop from the top and bottom of the image after it is resized to RESIZE_HEIGHT. For example, if set to 5 then 5 pixels are removed from the top and 5 pixels are removed from the bottom of the resized image. The default value (0) is for the default model (googlenet).",
          "type": "INT",
          "defaultValue": "0"
        },
        {
          "name": "LEFT_AND_RIGHT_CROP",
          "description": "The number of pixels to crop from the left and right of the image after it is resized to RESIZE_WIDTH. For example, if set to 5 then 5 pixels are removed from the left and 5 pixels are removed from the right of the resized image. The default value (0) is for the default model (googlenet).",
          "type": "INT",
          "defaultValue": "0"
        },
        {
          "name": "SUBTRACT_BLUE_VALUE",
          "description": "After the input image is resized and cropped, subtract this value from the blue color channel for all of the pixels. The range is [0.0, 255.0].",
          "type": "FLOAT",
          "defaultValue": "0.0"
        },
        {
          "name": "SUBTRACT_GREEN_VALUE",
          "description": "After the input image is resized and cropped, subtract this value from the green color channel for all of the pixels. The range is [0.0, 255.0].",
          "type": "FLOAT",
          "defaultValue": "0.0"
        },
        {
          "name": "SUBTRACT_RED_VALUE",
          "description": "After the input image is resized and cropped, subtract this value from the red color channel for all of the pixels. The range is [0.0, 255.0].",
          "type": "FLOAT",
          "defaultValue": "0.0"
        }      ]
    }
  },
  "actions": [
    {
      "name": "CAFFE GOOGLENET DETECTION ACTION",
      "description": "Performs caffe detection using the 'googlenet' model.",
      "algorithm": "CAFFE",
      "properties": [
        {
          "name": "SUBTRACT_BLUE_VALUE",
          "value": "104.0"
        },
        {
          "name": "SUBTRACT_GREEN_VALUE",
          "value": "117.0"
        },
        {
          "name": "SUBTRACT_RED_VALUE",
          "value": "123.0"
        }
      ]
    },
    {
      "name": "CAFFE GOOGLENET DETECTION (WITH LOSS3/CLASSIFIER LAYER ACTIVATION VALUES AND SPECTRAL HASH) ACTION",
      "description": "Performs caffe detection using the 'googlenet' model, and returns the activation values and the spectral hash for the loss3/classifier layer.",
      "algorithm": "CAFFE",
      "properties": [
        { "name" : "MODEL_NAME",
          "value" : "googlenet"
        },
        {
          "name" : "ACTIVATION_LAYER_LIST",
          "value" : "loss3/classifier"
        },
        {
          "name" : "SPECTRAL_HASH_FILE_LIST",
          "value" : "${MPF_HOME}/plugins/CaffeDetection/config/bvlc_googlenet_spectral_hash.json"
        },
        {
          "name": "SUBTRACT_BLUE_VALUE",
          "value": "104.0"
        },
        {
          "name": "SUBTRACT_GREEN_VALUE",
          "value": "117.0"
        },
        {
          "name": "SUBTRACT_RED_VALUE",
          "value": "123.0"
        }
      ]
    },
    {
      "name": "CAFFE YAHOO NSFW DETECTION ACTION",
      "description": "Performs caffe detection using the 'yahoo_nsfw' model.",
      "algorithm": "CAFFE",
      "properties": [
        {
          "name": "MODEL_NAME",
          "value": "yahoo_nsfw"
        },
        {
          "name": "NUMBER_OF_CLASSIFICATIONS",
          "value": "2"
        },
        {
          "name": "RESIZE_HEIGHT",
          "value": "256"
        },
        {
          "name": "RESIZE_WIDTH",
          "value": "256"
        },
        {
          "name": "TOP_AND_BOTTOM_CROP",
          "value": "16"
        },
        {
          "name": "LEFT_AND_RIGHT_CROP",
          "value": "16"
        },
        {
          "name": "SUBTRACT_BLUE_VALUE",
          "value": "104.0"
        },
        {
          "name": "SUBTRACT_GREEN_VALUE",
          "value": "117.0"
        },
        {
          "name": "SUBTRACT_RED_VALUE",
          "value": "123.0"
        }
      ]
    }
  ],
  "tasks": [
    {
      "name": "CAFFE GOOGLENET DETECTION TASK",
      "description": "Performs caffe detection using the 'googlenet' model.",
      "actions": [
        "CAFFE GOOGLENET DETECTION ACTION"
      ]
    },
    {
      "name": "CAFFE GOOGLENET DETECTION (WITH LOSS3/CLASSIFIER LAYER ACTIVATION VALUES AND SPECTRAL HASH) TASK",
      "description": "Performs caffe detection using the 'googlenet' model, and returns the activation values and the spectral hash for the loss3/classifier layer.",
      "actions": [
        "CAFFE GOOGLENET DETECTION (WITH LOSS3/CLASSIFIER LAYER ACTIVATION VALUES AND SPECTRAL HASH) ACTION"
      ]
    },
    {
      "name": "CAFFE YAHOO NSFW DETECTION TASK",
      "description": "Performs caffe detection using the 'yahoo_nsfw' model.",
      "actions": [
        "CAFFE YAHOO NSFW DETECTION ACTION"
      ]
    }
  ],
  "pipelines": [
    {
      "name": "CAFFE GOOGLENET DETECTION PIPELINE",
      "description": "Performs caffe detection using the 'googlenet' model.",
      "tasks": [
        "CAFFE GOOGLENET DETECTION TASK"
      ]
    },
    {
      "name": "CAFFE GOOGLENET DETECTION (WITH LOSS3/CLASSIFIER LAYER ACTIVATION VALUES AND SPECTRAL HASH) PIPELINE",
      "description": "Performs caffe detection using the 'googlenet' model, and returns the activation values and the spectral hash for the loss3/classifier layer.",
      "tasks": [
        "CAFFE GOOGLENET DETECTION (WITH LOSS3/CLASSIFIER LAYER ACTIVATION VALUES AND SPECTRAL HASH) TASK"
      ]
    },
    {
      "name": "CAFFE YAHOO NSFW DETECTION PIPELINE",
      "description": "Performs caffe detection using the 'yahoo_nsfw' model.",
      "tasks": [
        "CAFFE YAHOO NSFW DETECTION TASK"
      ]
    }
  ]
}

