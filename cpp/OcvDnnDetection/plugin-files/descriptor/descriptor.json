{
  "componentName": "OcvDnnDetection",
  "componentVersion": "5.0",
  "middlewareVersion": "5.0",
  "sourceLanguage": "c++",
  "batchLibrary": "${MPF_HOME}/plugins/OcvDnnDetection/lib/libmpfOcvDnnDetection.so",
  "environmentVariables": [
    {
      "name": "LD_LIBRARY_PATH",
      "value": "${MPF_HOME}/plugins/OcvDnnDetection/lib:${LD_LIBRARY_PATH}"
    }
  ],
  "algorithm": {
    "name": "DNNCV",
    "description": "Performs object classification using the OpenCV Deep Neural Networks module.",
    "actionType": "DETECTION",
    "requiresCollection": {
      "states": []
    },
    "providesCollection": {
      "states": [
        "DETECTION",
        "DETECTION_CLASS",
        "DETECTION_CLASS_OCV"
      ],
      "properties": [
        {
          "name": "MODEL_NAME",
          "description": "The model to be used with OpenCV. 'googlenet' is provided by default. Other models can be provided separately.",
          "type": "STRING",
          "defaultValue": "googlenet"
        },
        {
          "name": "MODELS_DIR_PATH",
          "description": "Path to models directory",
          "type": "STRING",
          "propertiesKey": "detection.models.dir.path"
        },
        {
          "name": "MODEL_INPUT_NAME",
          "description": "The label within the specified model which should be treated as input. The input name is specified in the config file (.prototxt, .pbtxt, .cfg, etc.) associated with the model.",
          "type": "STRING",
          "defaultValue": "data"
        },
        {
          "name": "MODEL_OUTPUT_LAYER",
          "description": "The name of the layer within the specified model for which output should be reported. The model layer names are defined in the config file (.prototxt, .pbtxt, .cfg, etc.) associated with the model.",
          "type": "STRING",
          "defaultValue": "prob"
        },
        {
          "name": "ACTIVATION_LAYER_LIST",
          "description": "The semicolon-delimited list of names of layers within the specified model for which activation values should be reported in the output. The model activation layer names are defined in the config file (.prototxt, .pbtxt, .cfg, etc.) associated with the model.",
          "type": "STRING",
          "defaultValue": ""
        },
        {
          "name": "SPECTRAL_HASH_FILE_LIST",
          "description": "A semicolon-delimited list of paths to files. Each file contains JSON formatted data to be used in computing the spectral hash of the activation values in one of the layers in the model. The list contains the following: the name of the model layer, the number of bits in the spectral hash, the max and min matrices, the modes matrix, and the principal components matrix.",
          "type": "STRING",
          "defaultValue": ""
        },
        {
          "name": "NUMBER_OF_CLASSIFICATIONS",
          "description": "The number of classifications, N, to be returned. The N highest confidence classifications found by the network will be returned with their associated confidence values. The value must be greater than 0, and less than the size of the model output layer.",
          "type": "INT",
          "defaultValue": "1"
        },
        {
          "name": "RESIZE_HEIGHT",
          "description": "The height, in pixels, to resize an input image before cropping it. The default value (224) is for the default model (googlenet).",
          "type": "INT",
          "defaultValue": "224"
        },
        {
          "name": "RESIZE_WIDTH",
          "description": "The width, in pixels, to resize an input image before cropping it. The default value (224) is for the default model (googlenet).",
          "type": "INT",
          "defaultValue": "224"
        },
        {
          "name": "TOP_AND_BOTTOM_CROP",
          "description": "The number of pixels to crop from the top and bottom of the image after it is resized to RESIZE_HEIGHT. For example, if set to 5 then 5 pixels are removed from the top and 5 pixels are removed from the bottom of the resized image. The default value (0) is for the default model (googlenet).",
          "type": "INT",
          "defaultValue": "0"
        },
        {
          "name": "LEFT_AND_RIGHT_CROP",
          "description": "The number of pixels to crop from the left and right of the image after it is resized to RESIZE_WIDTH. For example, if set to 5 then 5 pixels are removed from the left and 5 pixels are removed from the right of the resized image. The default value (0) is for the default model (googlenet).",
          "type": "INT",
          "defaultValue": "0"
        },
        {
          "name": "SUBTRACT_BLUE_VALUE",
          "description": "After the input image is resized and cropped, subtract this value from the blue color channel for all of the pixels. The range is [0.0, 255.0].",
          "type": "FLOAT",
          "defaultValue": "0.0"
        },
        {
          "name": "SUBTRACT_GREEN_VALUE",
          "description": "After the input image is resized and cropped, subtract this value from the green color channel for all of the pixels. The range is [0.0, 255.0].",
          "type": "FLOAT",
          "defaultValue": "0.0"
        },
        {
          "name": "SUBTRACT_RED_VALUE",
          "description": "After the input image is resized and cropped, subtract this value from the red color channel for all of the pixels. The range is [0.0, 255.0].",
          "type": "FLOAT",
          "defaultValue": "0.0"
        }
      ]
    }
  },
  "actions": [
    {
      "name": "CAFFE GOOGLENET DETECTION ACTION",
      "description": "Performs caffe detection using the 'googlenet' model.",
      "algorithm": "DNNCV",
      "properties": [
        {
          "name": "SUBTRACT_BLUE_VALUE",
          "value": "104.0"
        },
        {
          "name": "SUBTRACT_GREEN_VALUE",
          "value": "117.0"
        },
        {
          "name": "SUBTRACT_RED_VALUE",
          "value": "123.0"
        }
      ]
    },
    {
      "name": "CAFFE GOOGLENET DETECTION (WITH LOSS3/CLASSIFIER LAYER ACTIVATION VALUES AND SPECTRAL HASH) ACTION",
      "description": "Performs caffe detection using the 'googlenet' model, and returns the activation values and the spectral hash for the loss3/classifier layer.",
      "algorithm": "DNNCV",
      "properties": [
        {
          "name": "MODEL_NAME",
          "value": "googlenet"
        },
        {
          "name": "ACTIVATION_LAYER_LIST",
          "value": "loss3/classifier"
        },
        {
          "name": "SPECTRAL_HASH_FILE_LIST",
          "value": "${MPF_HOME}/plugins/OcvDnnDetection/models/bvlc_googlenet_spectral_hash.json"
        },
        {
          "name": "SUBTRACT_BLUE_VALUE",
          "value": "104.0"
        },
        {
          "name": "SUBTRACT_GREEN_VALUE",
          "value": "117.0"
        },
        {
          "name": "SUBTRACT_RED_VALUE",
          "value": "123.0"
        }
      ]
    },
    {
      "name": "CAFFE YAHOO NSFW DETECTION ACTION",
      "description": "Performs caffe detection using the 'yahoo_nsfw' model.",
      "algorithm": "DNNCV",
      "properties": [
        {
          "name": "MODEL_NAME",
          "value": "yahoo_nsfw"
        },
        {
          "name": "NUMBER_OF_CLASSIFICATIONS",
          "value": "2"
        },
        {
          "name": "RESIZE_HEIGHT",
          "value": "256"
        },
        {
          "name": "RESIZE_WIDTH",
          "value": "256"
        },
        {
          "name": "TOP_AND_BOTTOM_CROP",
          "value": "16"
        },
        {
          "name": "LEFT_AND_RIGHT_CROP",
          "value": "16"
        },
        {
          "name": "SUBTRACT_BLUE_VALUE",
          "value": "104.0"
        },
        {
          "name": "SUBTRACT_GREEN_VALUE",
          "value": "117.0"
        },
        {
          "name": "SUBTRACT_RED_VALUE",
          "value": "123.0"
        }
      ]
    },
    {
      "name": "TENSORFLOW VEHICLE COLOR DETECTION ACTION",
      "description": "Performs TensorFlow detection using the 'vehicle_color' model.",
      "algorithm": "DNNCV",
      "properties": [
        {
          "name": "MODEL_NAME",
          "value": "vehicle_color"
        },
        {
          "name": "MODEL_OUTPUT_LAYER",
          "value": "softmax_tensor"
        },
        {
          "name": "MODEL_INPUT_NAME",
          "value": "input_placeholder"
        },
        {
          "name": "RESIZE_HEIGHT",
          "value": "224"
        },
        {
          "name": "RESIZE_WIDTH",
          "value": "224"
        },
        {
          "name": "SUBTRACT_BLUE_VALUE",
          "value": "92.81"
        },
        {
          "name": "SUBTRACT_GREEN_VALUE",
          "value": "88.55"
        },
        {
          "name": "SUBTRACT_RED_VALUE",
          "value": "84.77"
        }
      ]
    },
    {
      "name": "TENSORFLOW VEHICLE COLOR DETECTION (WITH FF REGION) ACTION",
      "description": "Performs TensorFlow detection on regions using the 'vehicle_color' model.",
      "algorithm": "DNNCV",
      "properties": [
        {
          "name": "MODEL_NAME",
          "value": "vehicle_color"
        },
        {
          "name": "MODEL_OUTPUT_LAYER",
          "value": "softmax_tensor"
        },
        {
          "name": "MODEL_INPUT_NAME",
          "value": "input_placeholder"
        },
        {
          "name": "RESIZE_HEIGHT",
          "value": "224"
        },
        {
          "name": "RESIZE_WIDTH",
          "value": "224"
        },
        {
          "name": "SUBTRACT_BLUE_VALUE",
          "value": "92.81"
        },
        {
          "name": "SUBTRACT_GREEN_VALUE",
          "value": "88.55"
        },
        {
          "name": "SUBTRACT_RED_VALUE",
          "value": "84.77"
        },
        {
          "name": "FEED_FORWARD_TYPE",
          "value": "REGION"
        }
      ]
    }
  ],
  "tasks": [
    {
      "name": "CAFFE GOOGLENET DETECTION TASK",
      "description": "Performs caffe detection using the 'googlenet' model.",
      "actions": [
        "CAFFE GOOGLENET DETECTION ACTION"
      ]
    },
    {
      "name": "CAFFE GOOGLENET DETECTION (WITH LOSS3/CLASSIFIER LAYER ACTIVATION VALUES AND SPECTRAL HASH) TASK",
      "description": "Performs caffe detection using the 'googlenet' model, and returns the activation values and the spectral hash for the loss3/classifier layer.",
      "actions": [
        "CAFFE GOOGLENET DETECTION (WITH LOSS3/CLASSIFIER LAYER ACTIVATION VALUES AND SPECTRAL HASH) ACTION"
      ]
    },
    {
      "name": "CAFFE YAHOO NSFW DETECTION TASK",
      "description": "Performs caffe detection using the 'yahoo_nsfw' model.",
      "actions": [
        "CAFFE YAHOO NSFW DETECTION ACTION"
      ]
    },
    {
      "name": "TENSORFLOW VEHICLE COLOR DETECTION TASK",
      "description": "Performs TensorFlow detection using the 'vehicle_color' model.",
      "actions": [
        "TENSORFLOW VEHICLE COLOR DETECTION ACTION"
      ]
    },
    {
      "name": "TENSORFLOW VEHICLE COLOR DETECTION (WITH FF REGION) TASK",
      "description": "Performs TensorFlow detection on regions using the 'vehicle_color' model.",
      "actions": [
        "TENSORFLOW VEHICLE COLOR DETECTION (WITH FF REGION) ACTION"
      ]
    }
  ],
  "pipelines": [
    {
      "name": "CAFFE GOOGLENET DETECTION PIPELINE",
      "description": "Performs caffe detection using the 'googlenet' model.",
      "tasks": [
        "CAFFE GOOGLENET DETECTION TASK"
      ]
    },
    {
      "name": "CAFFE GOOGLENET DETECTION (WITH LOSS3/CLASSIFIER LAYER ACTIVATION VALUES AND SPECTRAL HASH) PIPELINE",
      "description": "Performs caffe detection using the 'googlenet' model, and returns the activation values and the spectral hash for the loss3/classifier layer.",
      "tasks": [
        "CAFFE GOOGLENET DETECTION (WITH LOSS3/CLASSIFIER LAYER ACTIVATION VALUES AND SPECTRAL HASH) TASK"
      ]
    },
    {
      "name": "CAFFE YAHOO NSFW DETECTION PIPELINE",
      "description": "Performs caffe detection using the 'yahoo_nsfw' model.",
      "tasks": [
        "CAFFE YAHOO NSFW DETECTION TASK"
      ]
    },
    {
      "name": "TENSORFLOW VEHICLE COLOR DETECTION PIPELINE",
      "description": "Performs TensorFlow detection using the 'vehicle_color' model.",
      "tasks": [
        "TENSORFLOW VEHICLE COLOR DETECTION TASK"
      ]
    },
    {
      "name": "TENSORFLOW VEHICLE COLOR DETECTION (WITH FF REGION FROM TINY YOLO VEHICLE DETECTOR) PIPELINE",
      "description": "Performs TensorFlow detection on feed forward regions for Tiny YOLO using the 'vehicle_color' model.",
      "tasks": [
        "TINY YOLO VEHICLE DETECTION TASK",
        "TENSORFLOW VEHICLE COLOR DETECTION (WITH FF REGION) TASK"
      ]
    },
    {
      "name": "TENSORFLOW VEHICLE COLOR DETECTION (WITH FF REGION FROM YOLO VEHICLE DETECTOR) PIPELINE",
      "description": "Performs TensorFlow detection on feed forward regions for YOLO using the 'vehicle_color' model.",
      "tasks": [
        "YOLO VEHICLE DETECTION TASK",
        "TENSORFLOW VEHICLE COLOR DETECTION (WITH FF REGION) TASK"
      ]
    }
  ]
}
