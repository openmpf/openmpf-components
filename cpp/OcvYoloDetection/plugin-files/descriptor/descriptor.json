{
  "componentName": "OcvYoloDetection",
  "componentVersion": "7.2",
  "middlewareVersion": "7.2",
  "sourceLanguage": "c++",
  "batchLibrary": "${MPF_HOME}/plugins/OcvYoloDetection/lib/libmpfOcvYoloDetection.so",
  "environmentVariables": [
    {
      "name": "LD_LIBRARY_PATH",
      "value": "${MPF_HOME}/plugins/OcvYoloDetection/lib:${LD_LIBRARY_PATH}"
    }
  ],
  "algorithm": {
    "name": "OCVYOLO",
    "description": "Detects objects in images and videos using the Open Computer Vision (OCV) library using Yolo.",
    "actionType": "DETECTION",
    "outputChangedCounter" : 1,
    "requiresCollection": {
      "states": []
    },
    "providesCollection": {
      "states": [
        "DETECTION",
        "DETECTION_CLASS",
        "DETECTION_CLASS_OCVYOLO"
      ],
      "properties": [
        {
          "name": "CONFIDENCE_THRESHOLD",
          "description": "Minimum detection confidence value [0...1] needed to keep detection and start a track.",
          "type": "FLOAT",
          "defaultValue": "0.5"
        },
        {
          "name": "MODEL_NAME",
          "description": "Name of YOLO model to run.",
          "type": "STRING",
          "defaultValue": "tiny yolo"
        },
        {
          "name": "MODELS_DIR_PATH",
          "description": "Only applies when using OpenCV DNN (not Triton). Path to models directory.",
          "type": "STRING",
          "propertiesKey": "detection.models.dir.path"
        },
        {
          "name": "CUDA_DEVICE_ID",
          "description": "Only applies when using OpenCV DNN (not Triton). CUDA device / GPU to use. Set to -1 to only use CPU.",
          "type": "INT",
          "propertiesKey": "detection.cuda.device.id"
        },
        {
          "name": "FALLBACK_TO_CPU_WHEN_GPU_PROBLEM",
          "description": "Only applies when using OpenCV DNN (not Triton). If true will fallback to CPU only when GPU fails to initialize.",
          "type": "BOOLEAN",
          "propertiesKey": "detection.use.cpu.when.gpu.problem"
        },
        {
          "name": "ENABLE_TRITON",
          "description": "If true, inferencing will be performed via a configured Triton inference server (not OpenCV DNN).",
          "type": "BOOLEAN",
          "defaultValue": "false"
        },
        {
          "name": "TRITON_SERVER",
          "description": "Triton server <host>:<port> to use for inferencing.",
          "type": "STRING",
          "defaultValue": "ocv-yolo-detection-server:8001"
        },
        {
          "name": "TRITON_MODEL_VERSION",
          "description": "Triton server model version to use for inferencing. Use empty string for the latest.",
          "type": "STRING",
          "defaultValue": ""
        },
        {
          "name": "TRITON_MODEL_NUM_CLASSES",
          "description": "Triton server model number of possible returned classes.",
          "type": "INT",
          "defaultValue": "80"
        },
        {
          "name": "TRITON_MAX_INFER_CONCURRENCY",
          "description": "Simultaneous client connections to Triton server. Should be set to number of GPUs available on the server.",
          "type": "INT",
          "defaultValue": "4"
        },
        {
          "name": "TRITON_INFER_TIMEOUT_US",
          "description": "Time in microseconds after which Triton server client requests timeout. 0 means the client will wait forever.",
          "type": "INT",
          "defaultValue": "0"
        },
        {
          "name": "TRITON_MAX_CONNECTION_SETUP_RETRIES",
          "description": "Maximum number of retry attempts for establishing a connection to the inference server after the first connection failure.",
          "type": "INT",
          "defaultValue": "5"
        },
        {
          "name": "TRITON_CONNECTION_SETUP_RETRY_INITIAL_DELAY",
          "description": "The time to sleep before trying to connect again (first retry), in seconds. The second retry will wait 2x this long, the third retry will wait 3x this long, etc.",
          "type": "INT",
          "defaultValue": "5"
        },
        {
          "name": "TRITON_VERBOSE_CLIENT",
          "description": "If true, inference server client messaging generates verbose log messages.",
          "type": "BOOLEAN",
          "defaultValue": "false"
        },
        {
          "name": "TRITON_USE_SSL",
          "description": "If true, inference server client connection uses SSL.",
          "type": "BOOLEAN",
          "defaultValue": "false"
        },
        {
          "name": "TRITON_USE_SHM",
          "description": "If true, inference server client communication uses shared memory (requires client and server to be on same machine).",
          "type": "BOOLEAN",
          "defaultValue": "false"
        },
        {
          "name": "NET_INPUT_IMAGE_SIZE",
          "description": "Scaled image width and height for detection network input (e.g. 320, 416, or 608).",
          "type": "INT",
          "defaultValue": "416"
        },
        {
          "name": "DETECTION_NMS_THRESHOLD",
          "description": "Non-maximum suppression threshold [0...1], IoU for duplicate object detection suppression.",
          "type": "FLOAT",
          "defaultValue": "0.3"
        },
        {
          "name": "DETECTION_FRAME_BATCH_SIZE",
          "description": "Number of frames to batch inference when processing video. GPU VRAM dependant.",
          "type": "INT",
          "defaultValue": "16"
        },
        {
          "name": "FRAME_QUEUE_CAPACITY",
          "description": "The maximum number of frames in the frame queue used by MPFAsyncVideoCapture. In most cases, this should be set to the value of DETECTION_FRAME_BATCH_SIZE. Setting it to a lower value is not recommended.",
          "type": "INT",
          "defaultValue": "16"
        },
        {
          "name": "NUMBER_OF_CLASSIFICATIONS_PER_REGION",
          "description": "Number of classifications to return per detection.",
          "type": "INT",
          "defaultValue": "5"
        },
        {
          "name": "CLASS_ALLOW_LIST_FILE",
          "description": "When provided, only class names contained in the specified file will be reported.",
          "type": "STRING",
          "defaultValue": ""
        },
        {
          "name": "TRACKING_MAX_FRAME_GAP",
          "description": "Maximum temporal distance (# of frames) between detections in a track. A gap larger than this value will result in creating a new track.",
          "type": "INT",
          "defaultValue": "4"
        },
        {
          "name": "TRACKING_MAX_CLASS_DIST",
          "description": "Maximum class similarity distance [0...1]. Detection clusters and track clusters are formed by comparing candidates against each cluster's average class feature. The distance must equal or fall below this value to add the candidate to the cluster. Similarly, the distance between a detection cluster and track cluster must equal or fall below this value to add those detections to those tracks.  A value of 1 or more will result in comparing all detections to all tracks, regardless of class.",
          "type": "FLOAT",
          "defaultValue": "0.99"
        },
        {
          "name": "TRACKING_MAX_IOU_DIST",
          "description": "Maximum intersection over union distance [0...1] between detections. Note that IOU distance = (1.0 - IOU). A detection may be added to a track if the distance between the detection and the track tail is equal to or below this value. A value of 0 or less will disable track assignment based on this distance metric.",
          "type": "FLOAT",
          "defaultValue": "0.3"
        },
        {
          "name": "TRACKING_MAX_FEATURE_DIST",
          "description": "Maximum normalized aggregate pixel difference [0...1] between detections. More specifically, the sum squared error (SSE) over the mean absolute pixel difference for each color channel. A detection may be added to a track if the distance between the detection and the track tail is equal to or below this value. A value of 0 or less will disable track assignment based on this distance metric.",
          "type": "FLOAT",
          "defaultValue": "0.1"
        },
        {
          "name": "TRACKING_EDGE_SNAP_DIST",
          "description": "Specifies a percentage of the frame width and height. Detections that fall within this space near the edge(s) of the frame are snapped to the respective edge(s).",
          "type": "FLOAT",
          "defaultValue": "0.005"
        },
        {
          "name": "TRACKING_DFT_SIZE",
          "description": "Discrete Fourier transform size for bbox alignment via phase correlation.",
          "type": "INT",
          "defaultValue": "128"
        },
        {
          "name": "TRACKING_DISABLE_MOSSE_TRACKER",
          "description": "Disable builtin backup OpenCV MOSSE tracking. OpenCV MOSSE tracking is performed in an attempt to continue a track when there are no compatible Yolo-generated detections in a given frame.",
          "type": "BOOLEAN",
          "defaultValue": "true"
        },
        {
          "name": "TRACKING_DFT_USE_HANNING_WINDOW",
          "description": "Use Hanning windowing with Discrete Fourier transform. This removes edge effects, resulting in better registration, but is slower.",
          "type": "BOOLEAN",
          "defaultValue": "true"
        },
        {
          "name": "KF_MAX_ASSIGNMENT_RESIDUAL",
          "description": "Maximum number of standard deviations of a Kalman filter state residual that a potential detection assignment is allowed to cause.",
          "type": "FLOAT",
          "defaultValue": "2.5"
        },
        {
          "name": "KF_DISABLED",
          "description": "Disables the use of motion prediction via Kalman filtering during tracking.",
          "type": "BOOLEAN",
          "defaultValue": "false"
        },
        {
          "name": "KF_RN",
          "description": "Bounding box detector noise standard deviations (in pixels) [center_x_noise_stdev, center_y_noise_stdev, width_noise_stdev, height_noise_stdev] for Kalman filter measurement noise matrix, R.",
          "type": "STRING",
          "defaultValue": " [ 10.0, 10.0, 100.0, 100.0 ] "
        },
        {
          "name": "KF_QN",
          "description": "Bounding box motion model acceleration inaccuracies/noise (in pixels/sec^2) [center_x_acceleration_noise_stdev, center_y_acceleration_noise_stdev, width_acceleration_noise_stdev, height_acceleration_noise_stdev ] for Kalman filter model (process) noise matrix, Q.",
          "type": "STRING",
          "defaultValue": " [ 1000.0, 1000.0, 1000.0, 1000.0 ] "
        },
        {
          "name": "ENABLE_DEBUG",
          "description": "Add track assignment information as detection properties.",
          "type": "BOOLEAN",
          "defaultValue": "false"
        }
      ]
    }
  },
  "actions": [
    {
      "name": "OCV TINY YOLO OBJECT DETECTION ACTION",
      "description": "Runs the Tiny YOLO object detection Darknet model.",
      "algorithm": "OCVYOLO",
      "properties": [
        {
          "name": "MODEL_NAME",
          "value": "TINY YOLO"
        },
        {
          "name": "NET_INPUT_IMAGE_SIZE",
          "value": "416"
        }
      ]
    },
    {
      "name": "OCV TINY YOLO VEHICLE DETECTION ACTION",
      "description": "Runs the Tiny YOLO object detection Darknet model, and only detects road vehicles (cars, buses, trucks).",
      "algorithm": "OCVYOLO",
      "properties": [
        {
          "name": "MODEL_NAME",
          "value": "TINY YOLO"
        },
        {
          "name": "NET_INPUT_IMAGE_SIZE",
          "value": "416"
        },
        {
          "name": "CLASS_ALLOW_LIST_FILE",
          "value": "$MPF_HOME/plugins/OcvYoloDetection/models/vehicle-allow-list.txt"
        }
      ]
    },
    {
      "name": "OCV YOLO OBJECT DETECTION ACTION",
      "description": "Runs the YOLO object detection Darknet model.",
      "algorithm": "OCVYOLO",
      "properties": [
        {
          "name": "MODEL_NAME",
          "value": "YOLO"
        },
        {
          "name": "NET_INPUT_IMAGE_SIZE",
          "value": "608"
        }
      ]
    },
    {
      "name": "OCV YOLO VEHICLE DETECTION ACTION",
      "description": "Runs the YOLO object detection Darknet model, and only detects road vehicles (cars, buses, trucks).",
      "algorithm": "OCVYOLO",
      "properties": [
        {
          "name": "MODEL_NAME",
          "value": "YOLO"
        },
        {
          "name": "NET_INPUT_IMAGE_SIZE",
          "value": "608"
        },
        {
          "name": "CLASS_ALLOW_LIST_FILE",
          "value": "$MPF_HOME/plugins/OcvYoloDetection/models/vehicle-allow-list.txt"
        }
      ]
    },
    {
      "name": "OCV TRITON YOLO OBJECT DETECTION ACTION",
      "description": "Runs the YOLO object detection TensorRT engine on the Triton server.",
      "algorithm": "OCVYOLO",
      "properties": [
        {
          "name": "MODEL_NAME",
          "value": "YOLO"
        },
        {
          "name": "NET_INPUT_IMAGE_SIZE",
          "value": "608"
        },
        {
          "name": "ENABLE_TRITON",
          "value": "true"
        }
      ]
    },
    {
      "name": "OCV TRITON YOLO VEHICLE DETECTION ACTION",
      "description": "Runs the YOLO object detection TensorRT engine on the Triton server, and only detects road vehicles (cars, buses, trucks).",
      "algorithm": "OCVYOLO",
      "properties": [
        {
          "name": "MODEL_NAME",
          "value": "YOLO"
        },
        {
          "name": "NET_INPUT_IMAGE_SIZE",
          "value": "608"
        },
        {
          "name": "CLASS_ALLOW_LIST_FILE",
          "value": "$MPF_HOME/plugins/OcvYoloDetection/models/vehicle-allow-list.txt"
        },
        {
          "name": "ENABLE_TRITON",
          "value": "true"
        }
      ]
    }
  ],
  "tasks": [
    {
      "name": "OCV TINY YOLO OBJECT DETECTION TASK",
      "description": "Runs the Tiny YOLO object detection Darknet model.",
      "actions": [
        "OCV TINY YOLO OBJECT DETECTION ACTION"
      ]
    },
    {
      "name": "OCV TINY YOLO VEHICLE DETECTION TASK",
      "description": "Runs the Tiny YOLO object detection Darknet model, and only detects road vehicles (cars, buses, trucks).",
      "actions": [
        "OCV TINY YOLO VEHICLE DETECTION ACTION"
      ]
    },
    {
      "name": "OCV YOLO OBJECT DETECTION TASK",
      "description": "Runs the YOLO object detection Darknet model.",
      "actions": [
        "OCV YOLO OBJECT DETECTION ACTION"
      ]
    },
    {
      "name": "OCV YOLO VEHICLE DETECTION TASK",
      "description": "Runs the YOLO object detection Darknet model, and only detects road vehicles (cars, buses, trucks).",
      "actions": [
        "OCV YOLO VEHICLE DETECTION ACTION"
      ]
    },
    {
      "name": "OCV TRITON YOLO OBJECT DETECTION TASK",
      "description": "Runs the YOLO object detection TensorRT engine on the Triton server.",
      "actions": [
        "OCV TRITON YOLO OBJECT DETECTION ACTION"
      ]
    },
    {
      "name": "OCV TRITON YOLO VEHICLE DETECTION TASK",
      "description": "Runs the YOLO object detection TensorRT engine on the Triton server, and only detects road vehicles (cars, buses, trucks).",
      "actions": [
        "OCV TRITON YOLO VEHICLE DETECTION ACTION"
      ]
    }
  ],
  "pipelines": [
    {
      "name": "OCV TINY YOLO OBJECT DETECTION PIPELINE",
      "description": "Runs the Tiny YOLO object detection Darknet model.",
      "tasks": [
        "OCV TINY YOLO OBJECT DETECTION TASK"
      ]
    },
    {
      "name": "OCV TINY YOLO OBJECT DETECTION (WITH MARKUP) PIPELINE",
      "description": "Runs the Tiny YOLO object detection Darknet model and produces markup.",
      "tasks": [
        "OCV TINY YOLO OBJECT DETECTION TASK",
        "OCV GENERIC MARKUP TASK"
      ]
    },
    {
      "name": "OCV TINY YOLO VEHICLE DETECTION PIPELINE",
      "description": "Runs the Tiny YOLO object detection Darknet model, and only detects road vehicles (cars, buses, trucks)",
      "tasks": [
        "OCV TINY YOLO VEHICLE DETECTION TASK"
      ]
    },
    {
      "name": "OCV TINY YOLO VEHICLE DETECTION (WITH MARKUP) PIPELINE",
      "description": "Runs the Tiny YOLO object detection Darknet model, and only detects road vehicles (cars, buses, trucks). Produces markup.",
      "tasks": [
        "OCV TINY YOLO VEHICLE DETECTION TASK",
        "OCV GENERIC MARKUP TASK"
      ]
    },
    {
      "name": "OCV YOLO OBJECT DETECTION PIPELINE",
      "description": "Runs the YOLO object detection Darknet model.",
      "tasks": [
        "OCV YOLO OBJECT DETECTION TASK"
      ]
    },
    {
      "name": "OCV YOLO OBJECT DETECTION (WITH MARKUP) PIPELINE",
      "description": "Runs the YOLO object detection Darknet model and produces markup.",
      "tasks": [
        "OCV YOLO OBJECT DETECTION TASK",
        "OCV GENERIC MARKUP TASK"
      ]
    },
    {
      "name": "OCV YOLO VEHICLE DETECTION PIPELINE",
      "description": "Runs the YOLO object detection Darknet model, and only detects road vehicles (cars, buses, trucks)",
      "tasks": [
        "OCV YOLO VEHICLE DETECTION TASK"
      ]
    },
    {
      "name": "OCV YOLO VEHICLE DETECTION (WITH MARKUP) PIPELINE",
      "description": "Runs the YOLO object detection Darknet model, and only detects road vehicles (cars, buses, trucks). Produces markup.",
      "tasks": [
        "OCV YOLO VEHICLE DETECTION TASK",
        "OCV GENERIC MARKUP TASK"
      ]
    },
    {
      "name": "OCV TRITON YOLO OBJECT DETECTION PIPELINE",
      "description": "Runs the YOLO object detection TensorRT engine on the Triton server.",
      "tasks": [
        "OCV TRITON YOLO OBJECT DETECTION TASK"
      ]
    },
    {
      "name": "OCV TRITON YOLO OBJECT DETECTION (WITH MARKUP) PIPELINE",
      "description": "Runs the YOLO object detection TensorRT engine on the Triton server and produces markup.",
      "tasks": [
        "OCV TRITON YOLO OBJECT DETECTION TASK",
        "OCV GENERIC MARKUP TASK"
      ]
    },
    {
      "name": "OCV TRITON YOLO VEHICLE DETECTION PIPELINE",
      "description": "Runs the YOLO object detection TensorRT engine on the Triton server, and only detects road vehicles (cars, buses, trucks)",
      "tasks": [
        "OCV TRITON YOLO VEHICLE DETECTION TASK"
      ]
    },
    {
      "name": "OCV TRITON YOLO VEHICLE DETECTION (WITH MARKUP) PIPELINE",
      "description": "Runs the YOLO object detection TensorRT engine on the Triton server, and only detects road vehicles (cars, buses, trucks). Produces markup.",
      "tasks": [
        "OCV TRITON YOLO VEHICLE DETECTION TASK",
        "OCV GENERIC MARKUP TASK"
      ]
    }
  ]
}
